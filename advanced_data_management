# very famous question: grade students, Numerical and character functions

y <- mean(x)
z <- mean(x, trim = 0.05, na.rm=TRUE)
mean(x) Mean
mean(c(1,2,3,4)) returns 2.5.
median(x) Median
median(c(1,2,3,4)) returns 2.5.
sd(x) Standard deviation
sd(c(1,2,3,4)) returns 1.29.
var(x) Variance
var(c(1,2,3,4)) returns 1.67.
mad(x) Median absolute deviation
mad(c(1,2,3,4)) returns 1.48.
quantile(x,probs)
Quantiles where x is the numeric vector, where quantiles are desired and probs is a numeric vector with probabilities in [0,1]
# 30th and 84th percentiles of x
y <- quantile(x, c(.3,.84))
range(x) Range
x <- c(1,2,3,4)
range(x) returns c(1,4).
diff(range(x)) returns 3.
sum(x) Sum
sum(c(1,2,3,4)) returns 10.


diff(x, lag=n) Lagged differences, with lag indicating which lag to use. The default lag is 1.
x<- c(1, 5, 23, 29)
diff(x) returns c(4, 18, 6).
min(x) Minimum
min(c(1,2,3,4)) returns 1.
max(x) Maximum
max(c(1,2,3,4)) returns 4.
scale(x, center=TRUE, scale=TRUE) Column center (center=TRUE) or standardize (center=TRUE, scale=TRUE) data object x

newdata <- scale(mydata)
newdata <- scale(mydata)*SD + M


# probability functions

[dpqr]distribution_abbreviation()


d = density
p = distribution function
q = quantile function
r = random generation (random deviates)

we should not ask for the probablity that X is exactly a single number( since the probability is zero). Instead, we need to think about
the probability that x is close to a single number. 
we capture the notion of being close to a number with a probability density funciton.


#Some of the most useful character functions

nchar(x)  # Counts the number of characters of x. x <- c("ab", "cde", "fghij") length(x) returns 3 
          # nchar(x[3]) returns 5


substr(x, start, stop)  # Extracts or replaces substrings in a character vector. x <- "abcdef". substr(x, 2, 4) returns bcd.
                        # substr(x, 2, 4) <- "22222" (x is now "a222ef").
                     

grep(pattern, x, ignore.case=FALSE, fixed=FALSE) # Searches for pattern in x. If fixed=FALSE, then pattern is a
regular expression. If fixed=TRUE, then pattern is a text string.
Returns the matching indices.
grep("A", c("b","A","c"), fixed=TRUE) returns 2.



sub(pattern, replacement,
x, ignore.case=FALSE,
fixed=FALSE)  # Finds pattern in x and substitutes the replacement text. If
fixed=FALSE, then pattern is a regular expression. If
fixed=TRUE, then pattern is a text string.
sub("\\s",".","Hello There") returns Hello.There. Note
that "\s" is a regular expression for finding whitespace; use
"\\s" instead, because "\" is R’s escape character


strsplit(x, split,
fixed=FALSE) # Splits the elements of character vector x at split. If
fixed=FALSE, then pattern is a regular expression. If
fixed=TRUE, then pattern is a text string.
y <- strsplit("abc", "") returns a one-component,
three-element list containing
"a" "b" "c"
unlist(y)[2] and sapply(y, "[", 2) both return “b”.

paste(..., sep="") # Concatenates strings after using the sep string to separate them.
paste("x", 1:3, sep="") returns c("x1", "x2", "x3").
paste("x",1:3,sep="M") returns c("xM1","xM2" "xM3").
paste("Today is", date()) returns
Today is Mon Dec 28 14:17:32 2015
(I changed the date to appear more current.)

toupper(x) # Uppercase.
toupper("abc") returns “ABC”.

tolower(x) #Lowercase.
tolower("ABC") returns “abc”.


apply(x, MARGIN, FUN, ...)
#x is the data object, MARGIN is the dimension index, FUN is a function you specify,
and ... are any parameters you want to pass to FUN. In a matrix or data frame, MARGIN=1
indicates rows and MARGIN=2 indicates columns.

apply(mydata, 1, mean)
apply(mydata, 2, mean, trim=0.2)


Whereas apply() applies a function over the margins of an array, lapply() and sapply() apply a function over a list


options(digits=2)
> Student <- c("John Davis", "Angela Williams", "Bullwinkle Moose",
"David Jones", "Janice Markhammer", "Cheryl Cushing",
"Reuven Ytzrhak", "Greg Knox", "Joel England",
"Mary Rayburn")
> Math <- c(502, 600, 412, 358, 495, 512, 410, 625, 573, 522)
> Science <- c(95, 99, 80, 82, 75, 85, 80, 95, 89, 86)
> English <- c(25, 22, 18, 15, 20, 28, 15, 30, 27, 18)
> roster <- data.frame(Student, Math, Science, English,
stringsAsFactors=FALSE)
> z <- scale(roster[,2:4])
> score <- apply(z, 1, mean)
> roster <- cbind(roster, score)
> y <- quantile(score, c(.8,.6,.4,.2))
> roster$grade[score >= y[1]] <- "A"
> roster$grade[score < y[1] & score >= y[2]] <- "B"
> roster$grade[score < y[2] & score >= y[3]] <- "C"
> roster$grade[score < y[3] & score >= y[4]] <- "D"
> roster$grade[score < y[4]] <- "F"
> name <- strsplit((roster$Student), " ")
> Lastname <- sapply(name, "[", 2)
> Firstname <- sapply(name, "[", 1)
> roster <- cbind(Firstname,Lastname, roster[,-1])
> roster <- roster[order(Lastname,Firstname),]
> roster







